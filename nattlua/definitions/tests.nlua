local type types = {}

analyzer function types.assert(what: any, type: any)
	what = what or types.Nil()
	type = type or types.Nil()

	if what.Type == "union" and #what:GetData() == 1 then
		what = what:GetData()[1]
	end

	if type.Type == "union" and #type:GetData() == 1 then
		type = type:GetData()[1]
	end

	if what:Equal(type) or (what:GetContract() or what):Equal(type) then return end
	local a = tostring(type)
	local b = tostring(what:GetContract() or what)
	error("expected " .. a .. " got " .. b, 2)
end

analyzer function types.subset_of(A: any, B: any)
	local ok, err = A:IsSubsetOf(B)

	if not ok then
		error(err)
	end

	return ok
end

analyzer function types.assert_literal(val: any)
	assert(val:IsLiteral(), "not a literal")
end

analyzer function types.assert_superset(what: any, type: any)
	if not what:IsSubsetOf(type) or (what.type == "any" and type.type ~= "any") then
		error("expected " .. tostring(type) .. " got " .. tostring(what), 2)
	end
end

analyzer function types.assert_subset(what: any, type: any)
	local tassert = env.typesystem.types:Get(types.LString("assert_superset")):GetData().lua_function
	return tassert(type, what)
end

analyzer function types.traceback()
	print(analyzer:TypeTraceback())
end

_G.types = types