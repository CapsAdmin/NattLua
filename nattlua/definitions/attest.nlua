local type attest = {}

analyzer function attest.equal(A: any, B: any)
	local val = A

	A = A or types.Nil()
	B = B or types.Nil()

	if A.Type == "union" and #A:GetData() == 1 then
		A = A:GetData()[1]
	end

	if B.Type == "union" and #B:GetData() == 1 then
		B = B:GetData()[1]
	end

	if A:Equal(B) or (A:GetContract() or A):Equal(B) then return val end
	local a = tostring(B)
	local b = tostring(A:GetContract() or A)
	error("expected " .. a .. " got " .. b, 2)
end

analyzer function attest.literal(val: any)
	analyzer:ErrorAssert(val:IsLiteral())
	return val
end

analyzer function attest.superset_of(A: any, B: any)
	analyzer:ErrorAssert(B:IsSubsetOf(A))
	return A
end

analyzer function attest.subset_of(A: any, B: any)
	analyzer:ErrorAssert(A:IsSubsetOf(B))
	return A
end

_G.attest = attest