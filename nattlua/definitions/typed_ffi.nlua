local analyzer function cast(node: any, args: any)
	local table_print = require("nattlua.other.table_print")
	local cast = env.typesystem.cast

	if node.tag == "Struct" or node.tag == "Union" then
		local tbl = types.Table()

		for _, node in ipairs(node) do
			if node.tag == "Pair" then
				local key = types.LString(node[2])
				local val = cast(node[1], args)
				tbl:Set(key, val)
			else
				table_print(node)
				error("NYI: " .. node.tag)
			end
		end

		return tbl
	elseif node.tag == "Function" then
		local arguments = {}

		for _, arg in ipairs(node) do
			if arg.ellipsis then
				table.insert(arguments, types.Tuple({}):AddRemainder(types.Tuple({types.Any()}):SetRepeat(math.huge)))
			else
				table.insert(arguments, (cast(arg[1], args)))
			end
		end

		local return_type

		if
			node.t.tag == "Pointer" and
			node.t.t.tag == "Qualified" and
			node.t.t.t.n == "char"
		then
			local ptr = types.Table()
			ptr:Set(types.Number(), types.Number())
			return_type = types.Union({ptr, types.Nil()})
		else
			return_type = cast(node.t, args)
		end

		local obj = types.Function({
			ret = types.Tuple({return_type}),
			arg = types.Tuple(arguments),
		})
		obj:SetNode(analyzer.current_expression)
		return obj
	elseif node.tag == "Array" then
		local tbl = types.Table()
		-- todo node.size: array length
		tbl:Set(types.Number(), cast(node.t, args))
		return tbl
	elseif node.tag == "Type" then
		if
			node.n == "double" or
			node.n == "float" or
			node.n == "int8_t" or
			node.n == "uint8_t" or
			node.n == "int16_t" or
			node.n == "uint16_t" or
			node.n == "int32_t" or
			node.n == "uint32_t" or
			node.n == "char" or
			node.n == "signed char" or
			node.n == "unsigned char" or
			node.n == "short" or
			node.n == "short int" or
			node.n == "signed short" or
			node.n == "signed short int" or
			node.n == "unsigned short" or
			node.n == "unsigned short int" or
			node.n == "int" or
			node.n == "signed" or
			node.n == "signed int" or
			node.n == "unsigned" or
			node.n == "unsigned int" or
			node.n == "long" or
			node.n == "long int" or
			node.n == "signed long" or
			node.n == "signed long int" or
			node.n == "unsigned long" or
			node.n == "unsigned long int" or
			node.n == "float" or
			node.n == "double" or
			node.n == "long double" or
			node.n == "size_t"
		then
			return types.Number()
		elseif
			node.n == "int64_t" or
			node.n == "uint64_t" or
			node.n == "long long" or
			node.n == "long long int" or
			node.n == "signed long long" or
			node.n == "signed long long int" or
			node.n == "unsigned long long" or
			node.n == "unsigned long long int"
		then
			return types.Number()
		elseif node.n == "bool" or node.n == "_Bool" then
			return types.Boolean()
		elseif node.n == "void" then
			return types.Nil()
		elseif node.n:find("%$%d+%$") then
			local val = table.remove(args, 1)

			if not val then
				error("unable to lookup type $ #" .. (#args + 1), 2)
			end

			return val
		else
			local val = analyzer:IndexOperator(analyzer.current_expression, env.typesystem.ffi:Get(types.LString("C")), types.LString(node.n))

			if not val or val.Type == "symbol" and val:GetData() == nil then
				analyzer:Error(analyzer.current_expression, "cannot find value " .. node.n)
				return types.Any()
			end

			return val
		end
	elseif node.tag == "Qualified" then
		return cast(node.t, args)
	elseif node.tag == "Pointer" then
		if node.t.tag == "Type" and node.t.n == "void" then return types.Any() end
		local ptr = types.Table()
		local ctype = cast(node.t, args)
		ptr:Set(types.Number(), ctype)
		local meta = types.Table()
		meta:Set(types.LString("__index"), types.LuaTypeFunction(function(self, key)
			if ctype:GetMetaTable() then
					-- i'm not really sure about this
					-- boxed luajit ctypes seem to just get the metatable from the ctype

					return ctype:GetMetaTable():Get(key) end
		end, {types.Any(), types.Any()}, {}))
		ptr:SetMetaTable(meta)

		if node.t.tag == "Qualified" and node.t.t.n == "char" then return types.Union({types.String(), types.Nil(), ptr}) end

		return types.Union({ptr, types.Nil()})
	else
		table_print(node)
		error("NYI: " .. node.tag)
	end
end

analyzer function ffi.cdef(cdecl: string, ...: {[string] = any} | nil)
	assert(cdecl:IsLiteral(), "cdecl must be a string literal")

	for _, ctype in ipairs(assert(require("nattlua.other.cparser").parseString(cdecl:GetData(), {}, {...}))) do
		analyzer:NewIndexOperator(cdecl:GetNode(), env.typesystem.ffi:Get(types.LString("C")), types.LString(ctype.name), env.typesystem.cast(ctype.type, {...}))
	end
end

§env.typesystem.ffi:Get(types.LString("cdef")).no_expansion = true

analyzer function ffi.typeof(cdecl: string, ...: {[string] = any} | nil)
	assert(cdecl:IsLiteral(), "c_declaration must be a string literal")
	local declarations = assert(require("nattlua.other.cparser").parseString(cdecl:GetData(), {typeof = true}, {...}))
	local ctype = env.typesystem.cast(declarations[#declarations].type, {...})
	ctype:SetNode(cdecl:GetNode())
	local nilable_ctype = ctype:Copy()

	for _, keyval in ipairs(nilable_ctype:GetData()) do
		keyval.val = types.Nilable(keyval.val)
	end

	ctype:Set(types.LString("__call"), types.LuaTypeFunction(function(self, init)
		if init then
			analyzer:Assert(init:GetNode(), init:IsSubsetOf(nilable_ctype))
		end

		return ctype:Copy()
	end, {ctype, types.Nilable(nilable_ctype)}, {ctype}))
	ctype:SetMetaTable(ctype)
	return ctype
end

--§env.typesystem.ffi:Get(types.LString("typeof")).no_expansion = true

analyzer function ffi.get_type(cdecl: string, ...: {[string] = any} | nil)
	assert(cdecl:IsLiteral(), "c_declaration must be a string literal")
	local declarations = assert(require("nattlua.other.cparser").parseString(cdecl:GetData(), {typeof = true}, {...}))
	local ctype = env.typesystem.cast(declarations[#declarations].type, {...})
	ctype:SetNode(cdecl:GetNode())
	return ctype
end

analyzer function ffi.new(cdecl: any, ...: ...any)
	local declarations = assert(require("nattlua.other.cparser").parseString(cdecl:GetData(), {ffinew = true}, {...}))
	local ctype = env.typesystem.cast(declarations[#declarations].type, {...})
	return ctype
end

analyzer function ffi.metatype(ctype: any, meta: any)
	local new = meta:Get(types.LString("__new"))

	if new then
		meta:Set(types.LString("__call"), types.LuaTypeFunction(function(self, ...)
			return analyzer:Assert(analyzer.current_expression, analyzer:Call(new, types.Tuple({ctype, ...})))
		end, new:GetArguments():GetData(), new:GetReturnTypes():GetData()))
	end

	ctype:SetMetaTable(meta)
end

analyzer function ffi.load(lib: string)
	return env.typesystem.ffi:Get(types.LString("C"))
end
