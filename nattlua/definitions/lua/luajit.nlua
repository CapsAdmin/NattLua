function FFICtype<|obj: any|>
	local type t = TType<|obj|>

	if t == "any" then return obj end

	if t == "table" then
		local type self = obj
		obj.__call = function(self: ref any, init: ref nil | Partial<|obj|>)
			return copy<|self|>
		end
		obj.@MetaTable = obj
	end

	return obj
end

function FFIPointer<|T: any|>
	if T == nil then return T end

	-- https://github.com/LuaJIT/LuaJIT/blob/v2.1/src/lj_carith.c#L96-L159
	return {
		@MetaTable = self,
		[number] = T,
		__tostring = function(self: ref self)
			return "Pointer(" .. tostring(self[number]) .. ")"
		end,
		__index = function(self: ref self, key: ref (string | number))
			return self[number][key]
		end,
		__le = function(self: ref self, other: ref self)
			return boolean
		end,
		__lt = function(self: ref self, other: ref self)
			return boolean
		end,
		__add = function(self: ref self, other: ref (self | number))
			return FFIPointer<|T|>
		end,
		__sub = function(self: ref self, other: ref (self | number))
			return FFIPointer<|T|>
		end,
	}
end

function FFIArray<|size: number, T: any|>
	if T == nil then return T end

	return {
		@MetaTable = self,
		[0 .. (size - 1)] = T,
		__tostring = function(self: ref self)
			return "Array" .. tostring(size) .. "(" .. tostring(T) .. ")"
		end,
		__index = function(self: ref self, key: ref (string | number))
			return T --self[number][key]
		end,
		__le = function(self: ref self, other: ref self)
			return boolean
		end,
		__lt = function(self: ref self, other: ref self)
			return boolean
		end,
		__add = function(self: ref self, other: ref self | number)
			return FFIPointer<|T|>
		end,
		__sub = function(self: ref self, other: ref self | number)
			return FFIPointer<|T|>
		end,
	}
end

type cdata = FFIPointer<|number|>
type cdata.@TypeOverride = "cdata"
type Modules["ffi"] = {
	errno = function=(nil | number)>(number),
	os = "Windows" | "Linux" | "OSX" | "BSD" | "POSIX" | "Other",
	arch = "x86" | "x64" | "arm" | "ppc" | "ppcspe" | "mips",
	C = {},
	cdef = function=(string)>(nil),
	abi = function=(string)>(boolean),
	metatype = function=(ctype, Table)>(cdata),
	new = function=(string | ctype, number | nil, ...any)>(cdata),
	copy = function=(any, any, number | nil)>(nil),
	alignof = function=(ctype)>(number),
	cast = function=(ctype | string, cdata | string | number)>(cdata),
	typeof = function=(ctype, ...any)>(ctype),
	load = function=(string, boolean)>(userdata) | function=(string)>(userdata),
	sizeof = function=(ctype, number)>(number) | function=(ctype)>(number),
	string = function=(cdata, number | nil)>(string),
	gc = function=(ctype, Function)>(cdata),
	istype = function=(ctype, any)>(boolean),
	fill = function=(cdata, number, any)>(nil) | function=(cdata, len: number)>(nil),
	offsetof = function=(cdata, number)>(number),
}
--type Modules["ffi"].C.@Name = "FFI_C"
type Modules["jit.vmdef"] = {
	ffnames = List<|string|>,
	irfield = List<|string|>,
	ircall = List<|string|>,
	irnames = string,
	traceerr = List<|string|>,
	irfpm = List<|string|>,
	bcnames = string,
}
type Modules["jit.opt"] = {
	start = function=(...string)>(nil),
}
type jit_attach_bc = function=(func: Function--[[the function that's just been recorded]]
)>(nil)
type jit_attach_trace = function=(
	what: "flush" | "start" | "stop" | "abort", -- a description of the trace event
	tr: number, -- the trace number, not available for flush
	func: Function, -- the function being traced, available for start and abort
	pc: number, -- the program counter - the bytecode number of the function being recorded (if this a Lua function), available for start and abort
	otr: number, -- start: the parent trace number if this is a side trace, abort: abort code
	oex: number | string -- start: the exit number for the parent trace, abort: abort reason (string)
)>(nil)
type jit_attach_record = function=(
	tr: number, -- the trace number, not available for flush
	func: Function, -- the function being traced, available for start and abort
	pc: number, -- the program counter - the bytecode number of the function being recorded (if this a Lua function), available for start and abort
	depth: number -- the depth of the inlining of the current bytecode
)>(nil)
type jit_attach_texit = function=(
	tr: number, -- the trace number, not available for flush
	ex: number, -- the exit number
	ngpr: number, -- the number of general-purpose and floating point registers that are active at the exit
	nfpr: number -- the number of general-purpose and floating point registers that are active at the exit
)>(nil)
type jit = {
	os = Modules["ffi"].os,
	arch = Modules["ffi"].arch,
	attach = function=(
		jit_attach_bc | jit_attach_trace | jit_attach_record | jit_attach_texit,
		"bc" | "trace" | "record" | "texit" | nil
	)>(nil),
	tracebarrier = function=()>(nil),
	version_num = number,
	version = string,
	on = function=(Function | true, boolean | nil)>(nil),
	off = function=(Function | true, boolean | nil)>(nil),
	flush = function=(nil | Function | true, boolean | nil)>(nil),
	status = function=()>(boolean, ...string),
	security = function=()>(boolean, ...string),
	opt = Modules["jit.opt"],
}
type Modules["jit.profile"] = {
	stop = Function,
	start = Function,
	dumpstack = Function,
}
type Modules["jit.util"] = {
	-- Retrieves LuaJIT information about a given function, similarly to debug.getinfo
	funcinfo = function=(Function, position: number | nil)>(
		{
			linedefined = number, -- as for debug.getinfo
			lastlinedefined = number, -- as for debug.getinfo
			params = number, -- the number of parameters the function takes
			stackslots = number, -- the number of stack slots the function's local variable use
			upvalues = number, -- the number of upvalues the function uses
			bytecodes = number, -- the number of bytecodes it the compiled function
			gcconsts = number, -- the number of garbage collectable constants
			nconsts = number, -- the number of lua_Number (double) constants
			children = boolean, -- Boolean representing whether the function creates closures
			currentline = number, -- as for debug.getinfo
			isvararg = boolean, -- if the function is a vararg function
			source = string, -- as for debug.getinfo
			loc = string, -- a string describing the source and currentline, like "<source>:<line>"
			ffid = nil | number, -- the fast function id of the function (if it is one). In this case only upvalues above and addr below are valid
			addr = nil | number, -- the address of the function (if it is not a Lua function). If it's a C function rather than a fast function, only upvalues above is valid*
		}
	),
	-- Does the exact same thing as debug.getupvalue except it only returns the name, not the name and the object. 
	-- The upvalue indexes also start at 0 rather than 1, so doing jit.util.funcuvname(func, 0) will get you the same name as debug.getupvalue(func, 1)
	funcuvname = function=(func: Function, index: number)>(nil | string), -- The function returns nil if there is no upvalue with the given index, otherwise the name of the upvalue is returned
	-- Returns table fields
	traceinfo = function=(trace: number)>(
		{
			-- the linked trace (0 for link types: none, return, interpreter)
			link = number,
			-- the lowest IR constant (???)
			nk = number,
			-- the next IR instruction (???)
			nins = number,
			-- the link type
			linktype = "none" | "root" | "loop" | "tail-recursion" | "up-recursion" | "down-recursion" | "interpreter" | "return",
			-- number of snapshots (for use with jit.util.tracesnap)
			nexit = number,
		}
	),
	--
	traceir = function=(trace: number, position: number | nil)>(number, number, number, number, number),
	--
	tracek = function=(trace: number, position: number | nil)>(any, number, number | nil),
	--[[
		Returns table fields:
			0 (ref) (number): first IR ref for the snapshot
			1 (nslots) (number): the number of valid slots
			all indexes except first 2 and last (there might not be any of these): the snapshot map
			last index in table (number): -16777216 (255 << 24)
	]]
	tracesnap = function=(trace: number, sn: number | nil)>(List<|number|>),
	-- Returns the exit number to retrieve exit stub address from (gotten via jit.attach with the texit event)
	traceexitstub = function=(exitno: number)>(number),
	-- Gets the address of a function from a list of functions
	ircalladdr = function=(index: number)>(number),
	--
	tracemc = function=(tr: number)>(string, number, number),
	-- Returns bytecode of a function at a position.
	funcuvname = function=(func: Function, index: number)>(number, number),
	-- Gets a constant at a certain index in a function.
	funck = function=(func: Function, index: number)>(any),
}
local type ffi = require("ffi")
type _G.ffi = ffi

analyzer function ffi.sizeof(cdecl: any, len: nil | number)
	return cdecl_parser.sizeof(cdecl, len)
end

analyzer function ffi.cdef(cdecl: string, ...: ...any)
	cdecl_parser.cdef(cdecl, ...)
end

§env.typesystem.ffi:Get(types.ConstString("cdef")):SetPreventInputArgumentExpansion(true)

analyzer function ffi.cast(cdecl: string, src: any)
	return cdecl_parser.cast(cdecl, src)
end

analyzer function ffi.typeof(cdecl: string, ...: ...any)
	return cdecl_parser.typeof(cdecl, ...)
end

§env.typesystem.ffi:Get(types.ConstString("typeof")):SetPreventInputArgumentExpansion(true)

analyzer function ffi.get_type(cdecl: string, ...: ...any)
	return cdecl_parser.get_type(cdecl, ...)
end

analyzer function ffi.new(cdecl: any, ...: ...any)
	return cdecl_parser.new(cdecl, ...)
end

analyzer function ffi.metatype(ctype: any, meta: any)
	return cdecl_parser.metatype(ctype, meta)
end

analyzer function ffi.load(lib: string)
	return cdecl_parser.load(lib)
end

analyzer function ffi.gc(ctype: any, callback: Function)
	return ctype
end

function FFIType<|str: string|>
	return number
end

type ffi.string = function=(FFIPointer<|number|> | string, number | nil)>(string)
type ffi.C = ffi.load("")
