local type DateStruct = {
	year = number,
	month = number,
	day = number,
	hour = number,
	min = number,
	sec = number,
	wday = number,
	yday = number,
	isdst = boolean,
}
type os = {
	execute = function=(command: string)>(boolean | nil, string, number | nil) | function=()>(boolean | nil, string, number | nil),
	rename = function=(oldname: string, newname: string)>(boolean | nil, string, number | nil),
	getenv = function=(varname: string)>(string | nil),
	exit = function=(code: boolean | number, close: boolean)>(nil) | function=(code: boolean | number)>(nil) | function=()>(nil),
	remove = function=(filename: string)>(boolean | nil, string, number | nil),
	setlocale = function=(locale: string, category: string)>(string | nil) | function=(locale: string)>(string | nil),
	date = function <|format: nil | string, time: nil | number|>
		if format == nil or format == "*t" or format == "!*t" then
			return DateStruct
		end

		return string
	end,
	time = function=(date_table: DateStruct)>(number) | function=()>(number),
	tmpname = function=()>(string),
	clock = function=()>(0 .. inf),
}

do -- Simple functions using ReturnIfNonLiteral
	type os.difftime = ReturnIfNonLiteral<|
		analyzer function(t2: number, t1: number): (-inf .. inf)
			return t2:GetData() - t1:GetData()
		end
	|>
	type os.tmpname = ReturnIfNonLiteral<|
		analyzer function(): string
			return "/tmp/lua_" .. tostring(math.random(100000, 999999))
		end
	|>
end
