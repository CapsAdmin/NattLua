local type DebugHookCallback = function=(event: "call" | "return" | "tail call" | "count" | "line", line: number | nil)>()
local type DebugHookMask = "c" | "r" | "l" | "cr" | "cl" | "rl" | "crl"
local type LineNumber = -1 .. inf
type DebugGetInfo = {
	name = string | nil,
	namewhat = "global" | "local" | "method" | "field" | "upvalue" | "",
	source = string,
	short_src = string,
	linedefined = LineNumber,
	lastlinedefined = LineNumber,
	what = "Lua" | "C" | "main" | "tail",
	currentline = LineNumber,
	istailcall = boolean,
	nups = 0 .. inf,
	nparams = 0 .. inf,
	isvararg = boolean,
	func = AnyFunction | nil,
	activelines = {[LineNumber] = boolean} | nil,
}
-- Main debug library interface
type debug = {
	debug = function=()>(nil),
	gethook = function=()>((DebugHookCallback | nil, DebugHookMask | nil, number | nil)),
	sethook = function=(hook: DebugHookCallback | nil, mask: DebugHookMask | nil, count: number | nil)>(nil),
	getinfo = function=(f: AnyFunction | 1 .. inf, what: $"^[nSltufL]+$" | nil)>(DebugGetInfo | nil),
	getlocal = function=(level: 1 .. inf | Function, local_idx: 1 .. inf)>((string, any) | (nil)),
	setlocal = function=(level: 1 .. inf | Function, local_idx: 1 .. inf, value: any)>(string | nil),
	getmetatable = function=(value: any)>(AnyTable | nil),
	setmetatable = function=(value: any, metatable: AnyTable | nil)>(any),
	getregistry = function=()>(AnyTable),
	getupvalue = function=(f: AnyFunction, up_idx: 1 .. inf)>((string, any) | (nil)),
	setupvalue = function=(f: AnyFunction, up_idx: 1 .. inf, value: any)>(),
	upvalueid = function=(f: AnyFunction, n: 1 .. inf)>(userdata),
	upvaluejoin = function=(f1: AnyFunction, n1: 1 .. inf, f2: AnyFunction, n2: 1 .. inf)>(nil),
	getuservalue = function=(u: userdata)>(any),
	setuservalue = function=(udata: userdata, value: any)>(userdata),
	traceback = function=(message: any | nil, level: 1 .. inf | nil)>(string),
}

analyzer function debug.setfenv(val: Function, table: Table)
	if val and (val:IsLiteral() or val.Type == "function") then
		if val.Type == "number" then
			analyzer:SetEnvironmentOverride(analyzer.environment_nodes[val:GetData()], table, "runtime")
		elseif val:GetFunctionBodyNode() then
			analyzer:SetEnvironmentOverride(val:GetFunctionBodyNode(), table, "runtime")
		end
	end
end

analyzer function debug.getfenv(func: Function | nil)
	if not func then return analyzer:GetDefaultEnvironment("typesystem") end

	return analyzer:GetGlobalEnvironmentOverride(func:GetFunctionBodyNode() or func, "runtime")
end

type getfenv = debug.getfenv
type setfenv = debug.setfenv
