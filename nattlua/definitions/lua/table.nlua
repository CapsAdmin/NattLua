type table = {}
type Modules["table.new"] = function=(number, number)>({[number] = any})
type Modules["table.clear"] = function=(Table)>()

do -- Basic table manipulation functions
	analyzer function table.concat(tbl: List<|string|>, separator: string | nil)
		if not tbl:IsLiteral() then return types.String() end

		if
			separator and
			(
				separator.Type ~= "string" or
				not separator:IsLiteral()
			)
			and
			not separator.Type ~= "symbol" and
			separator:IsBoolean()
		then
			return types.String()
		end

		local out = {}

		for i, keyval in ipairs(tbl:GetData()) do
			if not keyval.val:IsLiteral() or keyval.val.Type == "union" then
				return types.String()
			end

			out[i] = keyval.val:GetData()
		end

		return table.concat(out, separator and separator:GetData() or nil)
	end

	analyzer function table.insert(tbl: List<|any|>, pos_val: AllTypesUnion ~ nil, val_: AllTypesUnion)
		if tbl.Type == "any" then return end

		local pos, val = pos_val, val_

		if not val then
			val = pos
			pos = analyzer:GetArrayLengthFromTable(tbl)
		else
			pos = analyzer:GetArrayLengthFromTable(tbl)
		end

		local contract = tbl:GetContract()

		if contract then
			local values = contract:GetValueUnion()
			values:RemoveType(types.Nil())
			analyzer:ErrorIfFalse(val:IsSubsetOf(values))
		end

		if not tbl:HasLiteralKeys() then return end

		if pos and pos:IsLiteral() then
			if pos.Type == "range" then
				pos = types.LNumberRange(pos:GetMin() + 1, pos:GetMax() + 1)
			else
				pos = types.LNumber(pos:GetData() + 1)
			end
		end

		if analyzer:IsInUncertainLoop(analyzer:GetScope()) then
			pos = pos:Widen()
		end

		assert(type(pos) ~= "number")
		analyzer:NewIndexOperator(tbl, pos, val)
	end

	analyzer function table.remove(tbl: List<|any|>, index: number | nil)
		if tbl:GetContract() then tbl = tbl:GetContract() end

		if not tbl:IsLiteral() then return tbl:Get(types.Number()) end

		if index and not index:IsLiteral() then return tbl:Get(types.Number()) end

		index = index or 1
		return table.remove(tbl:GetData(), index:GetData())
	end

	analyzer function table.move(a1: Table, f: any, e: any, t: any, a2: Table | nil)
		-- If a2 is not provided, move within the same table
		local target = a2 or a1

		-- If any parameters are not literal, we can't compute the result
		if not (f:IsLiteral() and e:IsLiteral() and t:IsLiteral()) then return end

		local from = f:GetData()
		local to_end = e:GetData()
		local target_start = t:GetData()

		-- If working with literal tables, perform the actual move
		if a1:IsLiteral() and target:IsLiteral() then
			-- Get the source data
			local source_data = a1:GetData()
			local target_data = target:GetData()

			-- Perform the move operation
			for i = from, to_end do
				local source_key = types.LNumber(i)
				local target_key = types.LNumber(target_start + (i - from))
				local value = a1:Get(source_key)

				if value then analyzer:NewIndexOperator(target, target_key, value) end
			end
		end

		return target
	end

	analyzer function table.pack(...: ...any)
		local args = {...}
		local result = types.Table()

		-- Add all arguments as indexed elements
		for i, arg in ipairs(args) do
			result:Set(types.LNumber(i), arg)
		end

		-- Add the 'n' field with the count
		result:Set(types.LString("n"), types.LNumber(#args))
		return result
	end
end

do -- Array manipulation functions
	analyzer function table.sort(tbl: List<|any|>, func: nil | function=(a: any, b: any)>(boolean))
		local union = types.Union()

		if tbl.Type == "tuple" then
			for i, v in ipairs(tbl:GetData()) do
				union:AddType(v)
			end
		elseif tbl.Type == "table" then
			for i, v in ipairs(tbl:GetData()) do
				union:AddType(v.val)
			end
		end

		if func then
			func:GetInputSignature():GetData()[1] = union
			func:GetInputSignature():GetData()[2] = union
			func:SetArgumentsInferred(true)
		end

		if tbl:IsLiteral() then
			if func then
				table.sort(tbl:GetData(), function(a, b)
					local b = analyzer:Call(func, types.Tuple({a.val, b.val})):GetWithNumber(1)

					if b:IsCertainlyTrue() or b:IsCertainlyFalse() then
						return b:IsCertainlyTrue()
					else
						error("cannot sort literal table with function that returns an uncertain boolean")
					end
				end)
			else
				table.sort(tbl:GetData(), function(a, b)
					return a.val:GetData() < b.val:GetData()
				end)
			end

			for i, kv in ipairs(tbl:GetData()) do
				kv.key = types.LNumber(i)
			end
		end
	end

	analyzer function table.unpack(tbl: List<|any|>, from: number | nil, to: number | nil)
		if tbl.Type == "any" then
			return types.Tuple():AddRemainder(types.Tuple({tbl:Get(len)}):SetRepeat(math.huge))
		end

		local len = tbl:GetArrayLength()

		if len.Type == "union" then len = len:Simplify() end

		if len.Type == "number" and not len:IsLiteral() then
			return types.Tuple():AddRemainder(types.Tuple({tbl:Get(len)}):SetRepeat(math.huge))
		end

		local t = {}

		for i = from and from:GetData() or 1, to and to:GetData() or 32 do
			local v = tbl:Get(types.LNumber(i))

			if not v then break end

			table.insert(t, v)
		end

		return table.unpack(t)
	end

	type unpack = table.unpack
end

do -- Size functions
	analyzer function table.getn(tbl: List<|any|>)
		return analyzer:GetArrayLengthFromTable(tbl)
	end

	analyzer function table.maxn(tbl: List<|any|>)
		return analyzer:GetArrayLengthFromTable(tbl)
	end
end

do -- Utility functions
	function table.destructure(tbl: Table, fields: List<|string|>, with_default: boolean | nil)
		local out = {}

		if with_default then table.insert(out, tbl) end

		for i, key in ipairs(fields) do
			out[with_default and (i + 1) or i] = tbl[key]
		end

		return table.unpack(out)
	end

	function table.mergetables(tables: List<|Table|>)
		local out = {}

		for i, tbl in ipairs(tables) do
			for k, v in pairs(tbl) do
				out[k] = v
			end
		end

		return out
	end

	function table.spread(tbl: nil | List<|any|>)
		if not tbl then return nil end

		return table.unpack(tbl)
	end
end
