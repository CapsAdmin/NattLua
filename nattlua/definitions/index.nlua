analyzer function import_type(name: string)
	if not name:IsLiteral() then error("path must be a literal string") end

	local path = name:GetData()
	analyzer.loaded = analyzer.loaded or {}

	if not analyzer.loaded[path] then
		local compiler = assert(nl.File(analyzer:ResolvePath(path)))
		assert(compiler:Lex())
		assert(compiler:Parse())
		analyzer.loaded[path] = analyzer:AnalyzeRootStatement(compiler.SyntaxTree)
	end

	return analyzer.loaded[path]
end

import_type<|"nattlua/definitions/utility.nlua"|>
import_type<|"nattlua/definitions/attest.nlua"|>
import_type<|"nattlua/definitions/lua/globals.nlua"|>
import_type<|"nattlua/definitions/lua/io.nlua"|>
import_type<|"nattlua/definitions/lua/luajit.nlua"|>
import_type<|"nattlua/definitions/lua/debug.nlua"|>
import_type<|"nattlua/definitions/lua/package.nlua"|>
import_type<|"nattlua/definitions/lua/bit.nlua"|>
import_type<|"nattlua/definitions/lua/table.nlua"|>
import_type<|"nattlua/definitions/lua/string.nlua"|>
import_type<|"nattlua/definitions/lua/math.nlua"|>
import_type<|"nattlua/definitions/lua/os.nlua"|>
import_type<|"nattlua/definitions/lua/coroutine.nlua"|>
import_type<|"nattlua/definitions/typed_ffi.nlua"|>
