local analyzer function cdef(str: string, ...: ...any)
	return require("nattlua.c_declarations.main").cdef(str, ...)
end

local analyzer function cdef_error(str: string, expect: string, ...: ...any)
	local args = {...}
	local ok, err = pcall(function() return require("nattlua.c_declarations.main").cdef(str, unpack(args)) end)
	assert(ok == false)
	assert(err:find(expect:GetData()))
end

local function reset()
	Â§require("nattlua.c_declarations.main").reset()
	local ffi = require("ffi")
	ffi.C = {}
end

do
	reset()
	local vars, typs = cdef([[
		int foo1;
		void foo2();
		void *foo3();
		unsigned long long * volatile (* (* *NAME1 [1][2])(char *))[3][4];
		void (__attribute__((stdcall))__ptr32*NAME2)();
		void NAME3(int (*ARG)(const uint8_t *, const uint8_t *));
		struct foo4 {int a;} *bar;
		struct foo5 faz;
		enum foo6 { a } bar;
	]])
end

do
	reset()
	local vars, typs = cdef[[
		int foo;
	]]
	attest.equal(vars.foo, _  as number)
end

do
	reset()
	local vars, typs = cdef[[
		struct MyStruct {int a;} *bar;
		struct MyStruct faz;
	]]
	attest.equal(vars.faz, typs.MyStruct)
	attest.equal(assert(vars.bar)[0], _  as nil | {a = number})
end

do
	reset()
	local vars, typs = cdef[[
		enum foo { a,b };
	]]
	attest.equal(typs.foo.a, 0)
	attest.equal(typs.foo.b, 1)
end

do
	reset()
	local vars, typs = cdef[[
		unsigned long long * volatile (* (* *NAME [1][2])(char *))[3][4];
	]]
	attest.equal(vars.NAME, _  as FFIArray(
		1,
		FFIArray(
			2,
			FFIPointer(
					FFIPointer(
							function=(FFIPointer(number) | nil)>(FFIPointer(FFIArray(3, FFIArray(4, FFIPointer(number) | nil))) | nil)
						) | nil
				) | nil
		)
	))
end

do
	reset()
	local vars, typs = cdef[[
		struct foo;
		struct foo {
			int a;
		};
	]]
	attest.equal(typs.foo, _  as {a = number})
end

do
	reset()
	local vars, typs = cdef[[
		struct foo;
	]]
	attest.equal(typs.foo, _ as {})
end

do
	reset()
	local vars, typs = cdef[[
		typedef struct {
			int bar;
		} foo;
	]]
	attest.equal(typs.foo, _ as {bar = number})
end

do
	reset()
	local vars, typs = cdef[[
		int foo;
		typedef bool BAR; // type declaration
		int foo2();
		struct MyStruct {int a;} *bar;  // type declaration and variable declaration
		struct MyStruct2 faz;  // type declaration and variable declaration
	]]
	attest.equal(vars, _  as {
		foo = number,
		foo2 = function=()>(number),
		bar = FFIPointer({a = number}) | nil,
		faz = typs.MyStruct2,
	})
	attest.equal(typs, _  as {
		BAR = boolean,
		MyStruct = {a = number},
		MyStruct2 = {},
	})
end

do
	reset()
	local vars, typs = cdef([[
		int readdir(void *dirp);
	]])
	attest.equal(vars.readdir, _  as function=(any)>(number))
end


do
	reset()
	local vars, typs = cdef([[
		int bar;
		typedef int foo;
	]])
	attest.equal(vars.bar, _ as number)
	attest.equal(vars.foo, _ as nil)

	attest.equal(typs.foo, _ as number)
	attest.equal(typs.bar, _ as nil)
end


do
	reset()
	local vars, typs = cdef([[
		typedef struct foo bar;
	]])

	attest.equal(typs.foo, _ as {})
	attest.equal(typs.bar, _ as {})


	attest.equal(vars.foo, nil)
	attest.equal(vars.bar, nil)
end


do
	reset()
	local vars, typs = cdef([[
		struct foo bar;
	]])
	attest.equal(vars.bar, _ as {})
	attest.equal(vars.foo, _ as nil)

	attest.equal(typs.foo, _ as {})
	attest.equal(typs.bar, _ as nil)
end

do
	reset()
	if math.random() > 0.5 then
		cdef[[
			struct test {
				int b;
			} foo;
		]]
	else
		cdef[[
			struct test {
				int a;
			} foo;
		]]
	end

	attest.equal(ffi.C.foo, _ as {a = number} | {b = number})
end

if false then
	do 
		reset()
		cdef_error([[
			enum foo { a };
			struct foo {};
		]], "redeclare")
	end

	do
		reset()
		cdef_error([[
			struct foo { int a; };
			struct foo { int a; int b; };
		]], "redeclare")
	end

	do
		reset()
		cdef[[
			struct foo { int a; };
		]]
		
		cdef_error([[
			struct foo { int a; int b; };
		]], "redeclare")
	end
end