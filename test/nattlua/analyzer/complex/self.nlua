do
    require("nattlua.syntax.runtime")
    require("nattlua.syntax.typesystem")
end

do
    local table_pool = require("nattlua.other.table_pool")

    local new_token = table_pool(function()
        return
            {
                type = "something" as string,
                value = "something" as string,
                whitespace = false as boolean,
                start = 0 as number,
                stop = 0 as number,
            }
    end, 3105585)

    local token = new_token()

    attest.equal(token, _ as {
        type = string,
        value = string,
        whitespace = boolean,
        start = number,
        stop = number,
    })
end

do
    local type { Token, TokenType } = import_type<|"nattlua/lexer/token.nlua"|>

    local table_pool = require("nattlua.other.table_pool")

    local new_token = table_pool(function()
        return
            {
                type = "unknown",
                value = "",
                whitespace = false,
                is_whitespace = false,
                start = 0,
                stop = 0,
            } as Token
    end, 3105585)

    local function NewToken(type--[[#: TokenType]], start--[[#: number]], stop--[[#: number]], is_whitespace--[[#: boolean]])--[[#: Token]]
        local tk = new_token()
        tk.type = type
        tk.is_whitespace = is_whitespace
        tk.start = start
        tk.stop = stop
        return tk
    end

    local tk = NewToken("symbol", 1, 2, false)

    attest.equal(tk.start, _ as number)
    attest.equal(tk.stop, _ as number)
end

do
    -- mutable: suppress warnings about mutating the argument within this function
    -- ref: passes the reference of the type from caller to this function instead of making a copy

    local function AddFunction(META: mutable ref {
        i = number,
        code = string,
        -- I want to express the ability to mutate this type within some constraint
        [string] = any,
    })
        -- mutates META by adding a function
        function META:PeekByte()--[[#: number]]
            local b = self.code:byte(self.i)
            return b
        end
    end

    local META = {} -- as {fails here}
    META.__index = META

    type META.i = number
    type META.code = string

    AddFunction(META)

    function META:Foo()
        return self:PeekByte() + 21
    end

    local self = setmetatable({}, META)

    attest.equal(self:Foo(), _ as number)
end

local Lexer = require("nattlua.lexer.lexer")

do
    local base = require("nattlua.types.base")
    §analyzer:AnalyzeUnreachableCode()
    attest.equal<|argument_type<|base.MakeUnique|>, (base.@Self, true | false)|>
end

do
    local {Number} = require("nattlua.types.number")
    §analyzer:AnalyzeUnreachableCode()
    local num = Number(1337)
    attest.equal(num:GetData(), _ as nil | number)
end

do
    require("nattlua.other.table_print")
end

do
    require("nattlua.other.json")
end
