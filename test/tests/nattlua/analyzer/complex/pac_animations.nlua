local type pac = {}
type pac.AddHook = function=(string, string, Function)>(nil)
type pac.ResetEntityBoneMatrix = function=(any, number)>(nil)
type pac.SetEntityBoneMatrix = function=(any, number, any)>(nil)
local type hook = {}
type hook.Add = function=(string, string, Function)>(nil)
local type positive_numbers = number -- 0 .. inf
local type table_index_range = number -- 1 .. inf
local type TVector = {
	x = number,
	y = number,
	z = number,
}
local type TAngle = {
	p = number,
	y = number,
	r = number,
	Up = function=(TAngle)>(TVector),
	Forward = function=(TAngle)>(TVector),
	Right = function=(TAngle)>(TVector),
}
local type TMatrix = {
	Translate = function=(self, TVector)>(),
	Rotate = function=(self, TAngle)>(),
	GetTranslation = function=(self)>(TVector),
	GetAngles = function=(self)>(TAngle),
}

local type Angle = function=(number, number, number)>(TAngle)
do
	setmetatable<|
		TAngle,
		{
			__sub = function=(TAngle, TAngle)>(TAngle),
			__add = function=(TAngle, TAngle)>(TAngle),
			__mul = function=(number | TAngle, number | TAngle)>(TAngle),
		}
	|>
end
local type LerpAngle = function=(number, TAngle, TAngle)>(TAngle)

	local type Vector = function=(number, number, number)>(TVector)
do
	setmetatable<|
		TVector,
		{
			__sub = function=(TVector, TVector)>(TVector),
			__add = function=(TVector, TVector)>(TVector),
			__mul = function=(number | TVector, number | TVector)>(TVector),
		}
	|>
end
local type LerpVector = function=(number, TVector, TVector)>(TVector)

	local type Matrix = function=()>(TMatrix)
do
	setmetatable<|TMatrix, {
		__mul = function=(self, TMatrix)>(TMatrix),
	}|>
end

local type BodyGroup = {
	id = positive_numbers,
	name = string,
	num = positive_numbers,
	submodels = {[table_index_range] = any}, -- not sure what's in here
}
local type Color = {
	r = number,
	g = number,
	b = number,
	a = number,
}
local type Triangle = {
	color = Color,
	normal = TVector,
	binormal = TVector,
	pos = TVector,
	u = number,
	v = number,
	userdata = {number, number, number, number},
	weights = {[table_index_range] = {bone = number, weight = number}},
}
local type TMesh = {
	Draw = function=(self)>(nil),
	BuildFromTriangles = function=(self, {[table_index_range] = Triangle})>(self),
}
local type Mesh = function=()>(TMesh)
local type Entity = {
	SetAngles = function=(self, TAngle)>(nil),
	GetModel = function=(self)>(string),
	GetBodyGroups = function=(self, positive_numbers)>({[table_index_range] = BodyGroup}),
	GetBodygroup = function=(self, positive_numbers)>(positive_numbers),
	LookupSequence = function=(self, string)>(positive_numbers),
	ResetSequence = function=(self, positive_numbers)>(nil),
	SetCycle = function=(self, positive_numbers)>(nil),
	SetupBones = function=(self)>(nil),
	TranslatePhysBoneToBone = function=(self, number)>(number),
	TranslateBoneToPhysBone = function=(self, number)>(number),
	GetBoneMatrix = function=(self, number)>(TMatrix),
	GetChildBones = function=(self, number)>({[table_index_range] = number}),
	BoneLength = function=(self, number)>(number),
	Remove = function=(self)>(nil),
	GetBoneParent = function=(self)>(number),
	GetBoneName = function=(self, number)>(string),
	LookupBone = function=(self, string)>(number),
	SetIK = function=(self, boolean)>(),
	RemoveCallOnRemove = function=(self, string)>(),
	CallOnRemove = function=(self, string, Function)>(nil),
	GetBoneCount = function=(self)>(number),
}
local type ClientsideModel = function=(string)>(Entity)
local type ModelMeshes = {
	[table_index_range] = {
		material = string,
		triangles = {[table_index_range] = Triangle},
		verticies = {[table_index_range] = Triangle},
	},
}
local type util = {}
type util.GetModelMeshes = function=(string, number, number)>(ModelMeshes)
local type WorldToLocal = function=(TVector, TAngle, TVector, TAngle)>(TVector, TAngle)
local type FrameTime = function=()>(number)
local type CurTime = function=()>(number)
local type Lerp = function=(number, number, number)>(number)
local type math = {} & math
local type table = {} & table
type math.Clamp = function=(number, number, number)>(number)
type table.Count = function=(Table)>(number)
--- 
local type BoneInfo = {
	MU = number,
	MF = number,
	MR = number,
	RU = number,
	RF = number,
	RR = number,
	Callback = nil | function=(any, TMatrix, number, TVector, TAngle, number, number)>(boolean),
}
local type FrameData = {
	@Name = "FrameData",
	BoneInfo = {
		[number] = BoneInfo,
	},
	FrameRate = number,
	EaseStyle = nil | string,
}
local type Gesture = {
	@Name = "Gesture",
	StartFrame = number,
	Frame = number,
	FrameDelta = number,
	FrameData = {
		[number] = FrameData,
	},
	FrameRate = number,
	Offset = number,
	Paused = boolean,
	RestartFrame = number,
	TimeScale = number,
	Interpolation = string,
	Type = string,
	TimeToArrive = number,
	DieTime = number,
	Power = number,
	Group = string,
	UseReferencePose = boolean,
	PreCallback = function=(any, string, self, number, FrameData, number)>(boolean),
	ShouldPlay = function=(
		any--[[Entity TODO, pac_animations depend on Gesture type]]
		,
		string,
		self,
		number,
		FrameData,
		number,
		number
	)>(boolean),
}
local type Animations = {
	[string] = Gesture,
} | {}
local type Entity = Entity & {pac_animations = Animations | nil, pac_animations_insequence = boolean | nil}
---
local animations = {}
animations.playing = {}
animations.playing = animations.playing or {}
animations.registered = animations.registered or {} as Map<|string, Gesture|>

do
	local old_types = {
		[0] = "gesture", -- Gestures are keyframed animations that use the current position and angles of the bones. They play once and then stop automatically.
		[1] = "posture", -- Postures are static animations that use the current position and angles of the bones. They stay that way until manually stopped. Use TimeToArrive if you want to have a posture lerp.
		[2] = "stance", -- Stances are keyframed animations that use the current position and angles of the bones. They play forever until manually stopped. Use RestartFrame to specify a frame to go to if the animation ends (instead of frame 1).
		[3] = "sequence", -- Sequences are keyframed animations that use the reference pose. They play forever until manually stopped. Use RestartFrame to specify a frame to go to if the animation ends (instead of frame 1).
	}
	local old_interpolations = {
		[0] = "linear", -- Straight linear interp.
		[1] = "cosine", -- Best compatability / quality balance.
		[1] = "cubic", -- Overall best quality blending but may cause animation frames to go 'over the top'.
	}

	function animations.ConvertOldData(data)
		if tonumber(data.Type) then data.Type = tonumber(data.Type) end

		if tonumber(data.Interpolation) then
			data.Interpolation = tonumber(data.Interpolation)
		end

		if type(data.Type) == "number" then data.Type = old_types[data.Type] end

		if type(data.Interpolation) == "number" then
			data.Interpolation = old_interpolations[data.Interpolation]
		end

		data.Type = data.Type or "sequence"
		data.Interpolation = data.Interpolation or "cosine"
	end
end

animations.eases = {}
local eases = animations.eases

do
	local c1 = 1.70158
	local c3 = c1 + 1
	local c2 = c1 * 1.525
	local c4 = (2 * math.pi) / 3
	local c5 = (2 * math.pi) / 4.5
	local n1 = 7.5625
	local d1 = 2.75
	local pi = math.pi
	local cos = math.cos
	local sin = math.sin
	local sqrt = math.sqrt
	eases.InSine = function(x: number)
		return 1 - cos((x * pi) / 2)
	end
	eases.OutSine = function(x: number)
		return sin((x * pi) / 2)
	end
	eases.InOutSine = function(x: number)
		return -(cos(pi * x) - 1) / 2
	end
	eases.InQuad = function(x: number)
		return x ^ 2
	end
	eases.OutQuad = function(x: number)
		return 1 - (1 - x) * (1 - x)
	end
	eases.InOutQuad = function(x: number)
		return x < 0.5 and 2 * x ^ 2 or 1 - ((-2 * x + 2) ^ 2) / 2
	end
	eases.InCubic = function(x: number)
		return x ^ 3
	end
	eases.OutCubic = function(x: number)
		return 1 - ((1 - x) ^ 3)
	end
	eases.InOutCubic = function(x: number)
		return x < 0.5 and 4 * x ^ 3 or 1 - ((-2 * x + 2) ^ 3) / 2
	end
	eases.InQuart = function(x: number)
		return x ^ 4
	end
	eases.OutQuart = function(x: number)
		return 1 - ((1 - x) ^ 4)
	end
	eases.InOutQuart = function(x: number)
		return x < 0.5 and 8 * x ^ 4 or 1 - ((-2 * x + 2) ^ 4) / 2
	end
	eases.InQuint = function(x: number)
		return x ^ 5
	end
	eases.OutQuint = function(x: number)
		return 1 - ((1 - x) ^ 5)
	end
	eases.InOutQuint = function(x: number)
		return x < 0.5 and 16 * x ^ 5 or 1 - ((-2 * x + 2) ^ 5) / 2
	end
	eases.InExpo = function(x: number)
		return x == 0 and 0 or (2 ^ (10 * x - 10))
	end
	eases.OutExpo = function(x: number)
		return x == 1 and 1 or 1 - (2 ^ (-10 * x))
	end
	eases.InOutExpo = function(x: number)
		return x == 0 and
			0 or
			x == 1 and
			1 or
			x < 0.5 and
			(
				2 ^ (
					20 * x - 10
				)
			) / 2 or
			(
				2 - (
					2 ^ (
						-20 * x + 10
					)
				)
			) / 2
	end
	eases.InCirc = function(x: number)
		return 1 - sqrt(1 - (x ^ 2))
	end
	eases.OutCirc = function(x: number)
		return sqrt(1 - ((x - 1) ^ 2))
	end
	eases.InOutCirc = function(x: number)
		return x < 0.5 and
			(
				1 - sqrt(1 - ((2 * x) ^ 2))
			) / 2 or
			(
				sqrt(1 - ((-2 * x + 2) ^ 2)) + 1
			) / 2
	end
	eases.InBack = function(x: number)
		return c3 * x ^ 3 - c1 * x ^ 2
	end
	eases.OutBack = function(x: number)
		return 1 + c3 * ((x - 1) ^ 3) + c1 * ((x - 1) ^ 2)
	end
	eases.InOutBack = function(x: number)
		return x < 0.5 and
			(
				(
					(
						2 * x
					) ^ 2
				) * (
					(
						c2 + 1
					) * 2 * x - c2
				)
			) / 2 or
			(
				(
					(
						2 * x - 2
					) ^ 2
				) * (
					(
						c2 + 1
					) * (
						x * 2 - 2
					) + c2
				) + 2
			) / 2
	end
	eases.InElastic = function(x: number)
		return x == 0 and
			0 or
			x == 1 and
			1 or
			-(
				2 ^ (
					10 * x - 10
				)
			) * sin((x * 10 - 10.75) * c4)
	end
	eases.OutElastic = function(x: number)
		return x == 0 and
			0 or
			x == 1 and
			1 or
			(
				2 ^ (
					-10 * x
				)
			) * sin((x * 10 - 0.75) * c4) + 1
	end
	eases.InOutElastic = function(x: number)
		return x == 0 and
			0 or
			x == 1 and
			1 or
			x < 0.5 and
			-(
				(
					2 ^ (
						20 * x - 10
					)
				) * sin((20 * x - 11.125) * c5)
			) / 2 or
			(
				(
					2 ^ (
						-20 * x + 10
					)
				) * sin((20 * x - 11.125) * c5)
			) / 2 + 1
	end
	eases.InBounce = function(x: number)
		return 1 - eases.OutBounce(1 - x)
	end
	eases.OutBounce = function(x: number)
		if (x < 1 / d1) then
			return n1 * x ^ 2
		elseif (x < 2 / d1) then
			x = x - (1.5 / d1)
			return n1 * x ^ 2 + 0.75
		elseif (x < 2.5 / d1) then
			x = x - (2.25 / d1)
			return n1 * x ^ 2 + 0.9375
		else
			x = x - (2.625 / d1)
			return n1 * x ^ 2 + 0.984375
		end
	end
	eases.InOutBounce = function(x: number)
		return x < 0.5 and
			(
				1 - eases.OutBounce(1 - 2 * x)
			) / 2 or
			(
				1 + eases.OutBounce(2 * x - 1)
			) / 2
	end
end

type FrameData.EaseStyle = keysof<|eases|>

function animations.GetRegisteredAnimations()
	return animations.registered
end

function animations.RegisterAnimation(name: string, tInfo: Gesture)
	if tInfo and tInfo.FrameData then
		local BonesUsed = {}

		for _, tFrame in ipairs(tInfo.FrameData) do
			for iBoneID, tBoneTable in pairs(tFrame.BoneInfo) do
				BonesUsed[iBoneID] = (BonesUsed[iBoneID] or 0) + 1
				tBoneTable.MU = tBoneTable.MU or 0
				tBoneTable.MF = tBoneTable.MF or 0
				tBoneTable.MR = tBoneTable.MR or 0
				tBoneTable.RU = tBoneTable.RU or 0
				tBoneTable.RF = tBoneTable.RF or 0
				tBoneTable.RR = tBoneTable.RR or 0
			end
		end

		if #tInfo.FrameData > 1 then
			for iBoneUsed in pairs(BonesUsed) do
				for _, tFrame in ipairs(tInfo.FrameData) do
					if not tFrame.BoneInfo[iBoneUsed] then
						tFrame.BoneInfo[iBoneUsed] = {MU = 0, MF = 0, MR = 0, RU = 0, RF = 0, RR = 0}
					end
				end
			end
		end
	end

	animations.registered[name] = tInfo

	for _, ent in ipairs(animations.playing) do
		if ent.pac_animations and ent.pac_animations[name] then
			local frame, delta = animations.GetEntityAnimationFrame(ent, name)

			if frame and delta then
				animations.ResetEntityAnimation(ent, name)
				animations.SetEntityAnimationFrame(ent, name, frame, delta)
			end
		end
	end
end

local function AdvanceFrame(tGestureTable: mutable Gesture, tFrameData: FrameData)
	if tGestureTable.Paused then return end

	if tGestureTable.TimeScale == 0 then
		local max = #tGestureTable.FrameData
		local offset = tGestureTable.Offset
		local start = tGestureTable.RestartFrame or 1
		offset = Lerp(offset % 1, start, max + 1)
		tGestureTable.Frame = math.floor(offset)
		tGestureTable.FrameDelta = offset % 1
		return true
	end

	tGestureTable.FrameDelta = tGestureTable.FrameDelta + FrameTime() * tFrameData.FrameRate * tGestureTable.TimeScale

	if tGestureTable.FrameDelta > 1 then
		tGestureTable.Frame = tGestureTable.Frame + 1
		tGestureTable.FrameDelta = math.min(1, tGestureTable.FrameDelta - 1)

		if tGestureTable.Frame > #tGestureTable.FrameData then
			tGestureTable.Frame = math.min(tGestureTable.RestartFrame or 1, #tGestureTable.FrameData)
			return true
		end
	end

	return false
end

local function CosineInterpolation(y1: TVector, y2: TVector, mu: number)
	local mu2 = (1 - math.cos(mu * math.pi)) / 2
	return y1 * (1 - mu2) + y2 * mu2
end

local function CubicInterpolation(y0: TAngle, y1: TAngle, y2: TAngle, y3: TAngle, mu: number)
	local mu2 = mu * mu
	local a0 = y3 - y2 - y0 + y1
	return a0 * mu * mu2 + (y0 - y1 - a0) * mu2 + (y2 - y0) * mu + y1
end

local EMPTYBONEINFO: BoneInfo = {MU = 0, MR = 0, MF = 0, RU = 0, RR = 0, RF = 0}

local function GetFrameBoneInfo(ent: Entity, tGestureTable: Gesture, iFrame: number, iBoneID: number)
	local tPrev = tGestureTable.FrameData[iFrame]

	if tPrev then
		return tPrev.BoneInfo[iBoneID] or
			tPrev.BoneInfo[ent:GetBoneName(iBoneID)] or
			EMPTYBONEINFO
	end

	return EMPTYBONEINFO
end

local function ProcessAnimations(ent: Entity)
	if not ent.pac_animations then return end

	for name, tbl in pairs(ent.pac_animations) do
		local frame = tbl.Frame
		local frame_data = tbl.FrameData[frame]
		local frame_delta = tbl.FrameDelta
		local die_time = tbl.DieTime
		local power = tbl.Power

		if die_time and die_time - 0.125 <= CurTime() then
			power = power * (die_time - CurTime()) / 0.125
		end

		if die_time and die_time <= CurTime() then
			animations.StopEntityAnimation(ent, name)
		elseif
			not tbl.PreCallback or
			not tbl.PreCallback(ent, name, tbl, frame, frame_data, frame_delta)
		then
			if
				tbl.ShouldPlay and
				not tbl.ShouldPlay(ent, name, tbl, frame, frame_data, frame_delta, power)
			then
				animations.StopEntityAnimation(ent, name, 0.2)
			end

			if tbl.Type == "gesture" then
				if AdvanceFrame(tbl, frame_data) then
					animations.StopEntityAnimation(ent, name)
				end
			elseif tbl.Type == "posture" then
				if frame_delta < 1 and tbl.TimeToArrive then
					frame_delta = math.min(1, frame_delta + FrameTime() * (1 / tbl.TimeToArrive))
					tbl.FrameDelta = frame_delta
				end
			else
				AdvanceFrame(tbl, frame_data)
			end
		end
	end

	animations.ResetEntityBoneMatrix(ent: Entity)

	if not ent.pac_animations then return end

	local tBuffer = {} as Map<|number, TMatrix|>

	for _, tbl in pairs(ent.pac_animations) do
		local iCurFrame = tbl.Frame
		local tFrameData = tbl.FrameData[iCurFrame]
		local fFrameDelta = tbl.FrameDelta
		local fDieTime = tbl.DieTime
		local fPower = tbl.Power

		if fDieTime and fDieTime - 0.125 <= CurTime() then
			fPower = fPower * (fDieTime - CurTime()) / 0.125
		end

		local fAmount = fPower * fFrameDelta

		for iBoneID, tBoneInfo in pairs(tFrameData.BoneInfo) do
			if type(iBoneID) ~= "number" then iBoneID = ent:LookupBone(iBoneID) end

			if not iBoneID then goto CONTINUE end

			if not tBuffer[iBoneID] then tBuffer[iBoneID] = Matrix() end

			local mBoneMatrix = assert(tBuffer[iBoneID])
			local vCurBonePos, aCurBoneAng = mBoneMatrix:GetTranslation(), mBoneMatrix:GetAngles()

			if
				not tBoneInfo.Callback or
				not tBoneInfo.Callback(ent, mBoneMatrix, iBoneID, vCurBonePos, aCurBoneAng, fFrameDelta, fPower)
			then
				local vUp = aCurBoneAng:Up()
				local vRight = aCurBoneAng:Right()
				local vForward = aCurBoneAng:Forward()
				local iInterp = tbl.Interpolation

				if iInterp == "linear" then
					if tbl.Type == "posture" then
						mBoneMatrix:Translate((tBoneInfo.MU * vUp + tBoneInfo.MR * vRight + tBoneInfo.MF * vForward) * fAmount)
						mBoneMatrix:Rotate(Angle(tBoneInfo.RR, tBoneInfo.RU, tBoneInfo.RF) * fAmount)
					else
						local bi1 = GetFrameBoneInfo(ent, tbl, iCurFrame - 1, iBoneID)

						if tFrameData["EaseStyle"] then
							local curease = tFrameData["EaseStyle"]
							mBoneMatrix:Translate(
								LerpVector(
										eases[curease](fFrameDelta),
										bi1.MU * vUp + bi1.MR * vRight + bi1.MF * vForward,
										tBoneInfo.MU * vUp + tBoneInfo.MR * vRight + tBoneInfo.MF * vForward
									) * fPower
							)
							mBoneMatrix:Rotate(
								LerpAngle(
										eases[curease](fFrameDelta),
										Angle(bi1.RR, bi1.RU, bi1.RF),
										Angle(tBoneInfo.RR, tBoneInfo.RU, tBoneInfo.RF)
									) * fPower
							)
						else
							mBoneMatrix:Translate(
								LerpVector(
										fFrameDelta,
										bi1.MU * vUp + bi1.MR * vRight + bi1.MF * vForward,
										tBoneInfo.MU * vUp + tBoneInfo.MR * vRight + tBoneInfo.MF * vForward
									) * fPower
							)
							mBoneMatrix:Rotate(
								LerpAngle(
										fFrameDelta,
										Angle(bi1.RR, bi1.RU, bi1.RF),
										Angle(tBoneInfo.RR, tBoneInfo.RU, tBoneInfo.RF)
									) * fPower
							)
						end
					end
				elseif
					iInterp == "cubic" and
					tbl.FrameData[iCurFrame - 2] and
					tbl.FrameData[iCurFrame + 1]
				then
					local bi0 = GetFrameBoneInfo(ent, tbl, iCurFrame - 2, iBoneID)
					local bi1 = GetFrameBoneInfo(ent, tbl, iCurFrame - 1, iBoneID)
					local bi3 = GetFrameBoneInfo(ent, tbl, iCurFrame + 1, iBoneID)
					mBoneMatrix:Translate(
						CosineInterpolation(
								bi1.MU * vUp + bi1.MR * vRight + bi1.MF * vForward,
								tBoneInfo.MU * vUp + tBoneInfo.MR * vRight + tBoneInfo.MF * vForward,
								fFrameDelta
							) * fPower
					)
					mBoneMatrix:Rotate(
						CubicInterpolation(
								Angle(bi0.RR, bi0.RU, bi0.RF),
								Angle(bi1.RR, bi1.RU, bi1.RF),
								Angle(tBoneInfo.RR, tBoneInfo.RU, tBoneInfo.RF),
								Angle(bi3.RR, bi3.RU, bi3.RF),
								fFrameDelta
							) * fPower
					)
				elseif iInterp == "none" then
					mBoneMatrix:Translate((tBoneInfo.MU * vUp + tBoneInfo.MR * vRight + tBoneInfo.MF * vForward))
					mBoneMatrix:Rotate(Angle(tBoneInfo.RR, tBoneInfo.RU, tBoneInfo.RF))
				else -- Default is Cosine
					local bi1 = GetFrameBoneInfo(ent, tbl, iCurFrame - 1, iBoneID)
					mBoneMatrix:Translate(
						CosineInterpolation(
								bi1.MU * vUp + bi1.MR * vRight + bi1.MF * vForward,
								tBoneInfo.MU * vUp + tBoneInfo.MR * vRight + tBoneInfo.MF * vForward,
								fFrameDelta
							) * fPower
					)
					mBoneMatrix:Rotate(
						CosineInterpolation(
								Angle(bi1.RR, bi1.RU, bi1.RF),
								Angle(tBoneInfo.RR, tBoneInfo.RU, tBoneInfo.RF),
								fFrameDelta
							) * fPower
					)
				end
			end

			::CONTINUE::
		end
	end

	for iBoneID, mMatrix in pairs(tBuffer) do
		pac.SetEntityBoneMatrix(ent, iBoneID, mMatrix)
	end
end

function animations.ResetEntityBoneMatrix(ent)
	for i = 0, ent:GetBoneCount() - 1 do
		pac.ResetEntityBoneMatrix(ent, i)
	end
end

function animations.ResetEntityAnimation(ent: Entity, name: string, fDieTime: number, fPower: number, fTimeScale: number)
	local animtable = animations.registered[name]

	if animtable then
		ent.pac_animations = ent.pac_animations or {}
		local framedelta = 0

		if animtable.Type == "posture" and not animtable.TimeToArrive then
			framedelta = 1
		end

		ent.pac_animations[name] = {
			Frame = animtable.StartFrame or 1,
			Offset = 0,
			FrameDelta = framedelta,
			FrameData = animtable.FrameData,
			TimeScale = fTimeScale or animtable.TimeScale or 1,
			Type = animtable.Type,
			RestartFrame = animtable.RestartFrame,
			TimeToArrive = animtable.TimeToArrive,
			ShouldPlay = animtable.ShouldPlay,
			Power = fPower or animtable.Power or 1,
			DieTime = fDieTime or animtable.DieTime,
			Group = animtable.Group,
			UseReferencePose = animtable.UseReferencePose,
			Interpolation = animtable.Interpolation,
		}
		animations.ResetEntityAnimationProperties(ent)

		for i, v in ipairs(animations.playing) do
			if v == ent then
				table.remove(animations.playing, i)

				break
			end
		end

		ent:CallOnRemove("pac_animations", function()
			for i, v in ipairs(animations.playing) do
				if v == ent then
					table.remove(animations.playing, i)

					break
				end
			end
		end)

		table.insert(animations.playing, ent)
	end
end

function animations.SetEntityAnimation(ent: Entity, name: string, fDieTime: number, fPower: number, fTimeScale: number)
	if ent.pac_animations and ent.pac_animations[name] then return end

	animations.ResetEntityAnimation(ent, name, fDieTime, fPower, fTimeScale)
end

function animations.GetEntityAnimation(ent: Entity, name: string)
	if ent.pac_animations and ent.pac_animations[name] then
		return ent.pac_animations[name]
	end
end

function animations.SetEntityAnimationFrame(ent: Entity, name: string, f: number, delta: number)
	if ent.pac_animations and ent.pac_animations[name] then
		local data = ent.pac_animations[name]
		f = math.ceil(f)
		f = math.Clamp(f, 1, #data.FrameData)
		data.Frame = f
		data.FrameDelta = delta and math.Clamp(delta, 0, 1) or 0
	end
end

function animations.GetEntityAnimationFrame(ent, name)
	if ent.pac_animations and ent.pac_animations[name] then
		local data = ent.pac_animations[name]
		return data.Frame, data.FrameDelta
	end
end

function animations.SetEntityAnimationCycle(ent: Entity, name: string, f: number)
	if ent.pac_animations and ent.pac_animations[name] then
		local data = ent.pac_animations[name]
		local duration = animations.GetAnimationDuration(ent, name)
		f = f % 1
		f = f * duration
		local sec = 0

		for i = 1, #data.FrameData do
			local dt = (1 / assert(data.FrameData[i]).FrameRate)

			if sec + dt >= f then
				data.Frame = i
				data.FrameDelta = math.Clamp(((f - sec) / dt) as number, 0, 1)

				break
			end

			sec = sec + dt
		end
	end
end

function animations.GetEntityAnimationCycle(ent: Entity, name: string)
	if ent.pac_animations and ent.pac_animations[name] then
		local data = ent.pac_animations[name]
		local sec = 0

		for i = 1, data.Frame - 1 do
			local dt = (1 / assert(data.FrameData[i]).FrameRate)
			sec = sec + dt
		end

		sec = Lerp(data.FrameDelta, sec, sec + (1 / data.FrameData[data.Frame].FrameRate))
		return sec / animations.GetAnimationDuration(ent, name)
	end
end

function animations.GetAnimationDuration(ent: Entity, name: string)
	if ent.pac_animations and ent.pac_animations[name] then
		local total = 0

		for i = 1, #ent.pac_animations[name].FrameData do
			local v = ent.pac_animations[name].FrameData[i]

			if v then total = total + (1 / (v.FrameRate or 1)) end
		end

		return total
	end

	return 0
end

local function ResetInSequence(ent: mutable Entity)
	if ent.pac_animations then
		for _, tbl in pairs(ent.pac_animations) do
			if
				tbl.Type == "sequence" and
				(
					not tbl.DieTime or
					CurTime() < tbl.DieTime - 0.125
				)
				or
				tbl.UseReferencePose
			then
				ent.pac_animations_insequence = true
				return
			end
		end

		ent.pac_animations_insequence = nil
	end
end

pac.AddHook("CalcMainActivity", "animations_reset_sequence", function(ent: Entity)
	if ent.pac_animations_insequence then
		ResetInSequence(ent)
		return 0, 0
	end
end)

function animations.ResetEntityAnimationProperties(ent: Entity)
	local anims = ent.pac_animations

	if anims and table.Count(anims) > 0 then
		ent:SetIK(false)
		ResetInSequence(ent)
	else
		--ent:SetIK(true)
		ent.pac_animations = nil
		ent.pac_animations_insequence = nil
		ent:RemoveCallOnRemove("pac_animations")

		for i, v in ipairs(animations.playing) do
			if v == ent then table.remove(animations.playing, i) end
		end
	end
end

-- Time is optional, sets the die time to CurTime() + time
function animations.StopEntityAnimation(ent: Entity, name: string, time: number)
	local anims = ent.pac_animations

	if anims and anims[name] then
		if time then
			if anims[name].DieTime then
				anims[name].DieTime = math.min(anims[name].DieTime, CurTime() + time)
			else
				anims[name].DieTime = CurTime() + time
			end
		else
			anims[name] = nil
		end

		animations.ResetEntityAnimationProperties(ent)
	end
end

function animations.StopAllEntityAnimations(ent: Entity, time: number)
	if ent.pac_animations then
		for name in pairs(ent.pac_animations) do
			animations.StopEntityAnimation(ent, name, time)
		end
	end
end

hook.Add("Think", "pac_custom_animations", function()
	for i, v in ipairs(animations.playing) do
		if v.pac_animations then ProcessAnimations(v) end
	end
end)

return animations
