-- this will use some reflection api to track types from ffi.cdef
import_type<|"typed_ffi.nlua"|>
local { cdecl } = import("shared_cdef.nlua")
local ffi = require("ffi")

ffi.cdef(cdecl)

-- both of these branches should hit, because jit.os == "OSX" is uncertain (jit.os is a union of "OSX" | "Linux" | "Windows", etc)

if jit.os == "OSX" then
    -- this will create a copy of the current cdef environment that is only available within this scope
    ffi.cdef([[
        struct dirent {
            int foo;
            int bar;
        };

        void open(struct dirent, struct DIR);
    ]])

    type_assert<|typeof ffi.C.open, (function({foo=number, bar=number}, {}): nil)|>
else
    -- same goes for this scope
    ffi.cdef([[
        struct dirent {
            const char* foo;
            const char* bar;
        };

        void open(struct dirent, struct DIR);
    ]])
    
    type_assert<|typeof ffi.C.open, (function({foo={[number] = number}, bar={[number] = number}}, {}): nil)|>
end

-- here we see a union of both scopes above
type_assert<|typeof ffi.C.open, (function({foo={[number] = number}, bar={[number] = number}}, {}): nil) | (function({foo=number, bar=number}, {}): nil)|>