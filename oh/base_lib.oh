local type empty_function = function(...): any

type PowerState =
	"battery" |
	"charged" |
	"charging" |
	"nobattery" |
	"unknown"

type Event =
	"focus" |
	"joystickaxis" |
	"joystickhat" |
	"joystickpressed" |
	"joystickreleased" |
	"keypressed" |
	"keyreleased" |
	"mousefocus" |
	"mousepressed" |
	"mousereleased" |
	"quit" |
	"resize" |
	"threaderror" |
	"visible"

type MessageBoxType =
	"error" |
	"info" |
	"warning"

type FullscreenType =
	"desktop" |
	"exclusive"

type HashFunction =
	"md5" |
	"sha1" |
	"sha224" |
	"sha256" |
	"sha384" |
	"sha512"

type ContainerType =
	"data" |
	"string"

type Scancode =
	"'" |
	"," |
	"-" |
	"." |
	"/" |
	"0" |
	"1" |
	"2" |
	"3" |
	"4" |
	"5" |
	"6" |
	"7" |
	"8" |
	"9" |
	";" |
	"=" |
	"[" |
	"\\" |
	"]" |
	"`" |
	"a" |
	"acback" |
	"acbookmarks" |
	"acforward" |
	"achome" |
	"acrefresh" |
	"acsearch" |
	"acstop" |
	"again" |
	"alterase" |
	"app1" |
	"app2" |
	"application" |
	"audiomute" |
	"audionext" |
	"audioplay" |
	"audioprev" |
	"audiostop" |
	"b" |
	"backspace" |
	"brightnessdown" |
	"brightnessup" |
	"c" |
	"calculator" |
	"cancel" |
	"capslock" |
	"clear" |
	"clearagain" |
	"computer" |
	"copy" |
	"crsel" |
	"currencysubunit" |
	"currencyunit" |
	"cut" |
	"d" |
	"decimalseparator" |
	"delete" |
	"displayswitch" |
	"down" |
	"e" |
	"eject" |
	"end" |
	"escape" |
	"execute" |
	"exsel" |
	"f" |
	"f1" |
	"f10" |
	"f11" |
	"f12" |
	"f13" |
	"f14" |
	"f15" |
	"f16" |
	"f17" |
	"f18" |
	"f19" |
	"f2" |
	"f20" |
	"f21" |
	"f22" |
	"f23" |
	"f24" |
	"f3" |
	"f4" |
	"f5" |
	"f6" |
	"f7" |
	"f8" |
	"f9" |
	"find" |
	"g" |
	"h" |
	"help" |
	"home" |
	"i" |
	"insert" |
	"international1" |
	"international2" |
	"international3" |
	"international4" |
	"international5" |
	"international6" |
	"international7" |
	"international8" |
	"international9" |
	"j" |
	"k" |
	"kbdillumdown" |
	"kbdillumtoggle" |
	"kbdillumup" |
	"kp*" |
	"kp+" |
	"kp-" |
	"kp." |
	"kp/" |
	"kp0" |
	"kp00" |
	"kp000" |
	"kp1" |
	"kp2" |
	"kp3" |
	"kp4" |
	"kp5" |
	"kp6" |
	"kp7" |
	"kp8" |
	"kp9" |
	"kp=" |
	"kpenter" |
	"l" |
	"lalt" |
	"lang1" |
	"lang2" |
	"lang3" |
	"lang4" |
	"lang5" |
	"lctrl" |
	"left" |
	"lgui" |
	"lshift" |
	"m" |
	"mail" |
	"mediaselect" |
	"menu" |
	"mute" |
	"n" |
	"nonus#" |
	"nonusbackslash" |
	"numlock" |
	"o" |
	"oper" |
	"out" |
	"p" |
	"pagedown" |
	"pageup" |
	"paste" |
	"pause" |
	"power" |
	"printscreen" |
	"prior" |
	"q" |
	"r" |
	"ralt" |
	"rctrl" |
	"return" |
	"return2" |
	"rgui" |
	"right" |
	"rshift" |
	"s" |
	"scrolllock" |
	"select" |
	"separator" |
	"sleep" |
	"space" |
	"stop" |
	"sysreq" |
	"t" |
	"tab" |
	"thsousandsseparator" |
	"u" |
	"undo" |
	"unknown" |
	"up" |
	"v" |
	"volumedown" |
	"volumeup" |
	"w" |
	"www" |
	"x" |
	"y" |
	"z"

type KeyConstant =
	"!" |
	"#" |
	"$" |
	"&" |
	"'" |
	"(" |
	")" |
	"*" |
	"+" |
	"," |
	"-" |
	"." |
	"/" |
	"0" |
	"1" |
	"2" |
	"3" |
	"4" |
	"5" |
	"6" |
	"7" |
	"8" |
	"9" |
	":" |
	";" |
	"<" |
	"=" |
	">" |
	"?" |
	"@" |
	"[" |
	"\"" |
	"\\" |
	"]" |
	"^" |
	"_" |
	"`" |
	"a" |
	"appback" |
	"appbookmarks" |
	"appforward" |
	"apphome" |
	"apprefresh" |
	"appsearch" |
	"b" |
	"backspace" |
	"break" |
	"c" |
	"calculator" |
	"capslock" |
	"clear" |
	"compose" |
	"d" |
	"delete" |
	"down" |
	"e" |
	"end" |
	"escape" |
	"euro" |
	"f" |
	"f1" |
	"f10" |
	"f11" |
	"f12" |
	"f13" |
	"f14" |
	"f15" |
	"f2" |
	"f3" |
	"f4" |
	"f5" |
	"f6" |
	"f7" |
	"f8" |
	"f9" |
	"g" |
	"h" |
	"help" |
	"home" |
	"i" |
	"insert" |
	"j" |
	"k" |
	"kp*" |
	"kp+" |
	"kp-" |
	"kp." |
	"kp/" |
	"kp0" |
	"kp1" |
	"kp2" |
	"kp3" |
	"kp4" |
	"kp5" |
	"kp6" |
	"kp7" |
	"kp8" |
	"kp9" |
	"kp=" |
	"kpenter" |
	"l" |
	"lalt" |
	"lctrl" |
	"left" |
	"lmeta" |
	"lshift" |
	"lsuper" |
	"m" |
	"mail" |
	"menu" |
	"mode" |
	"n" |
	"numlock" |
	"o" |
	"p" |
	"pagedown" |
	"pageup" |
	"pause" |
	"power" |
	"print" |
	"q" |
	"r" |
	"ralt" |
	"rctrl" |
	"return" |
	"right" |
	"rmeta" |
	"rshift" |
	"rsuper" |
	"s" |
	"scrollock" |
	"space" |
	"sysreq" |
	"t" |
	"tab" |
	"u" |
	"undo" |
	"up" |
	"v" |
	"w" |
	"www" |
	"x" |
	"y" |
	"z"

type coroutine = {
	wrap = (function(f: empty_function): empty_function),
	resume = (function(co: thread, val1: any, ...): boolean, ...)    |    (function(co: thread): boolean, ...),
	yield = (function(...): nil),
	status = (function(co: thread): string),
	isyieldable = (function(): boolean),
	running = (function(): thread, boolean),
	create = (function(f: empty_function): thread)
}
type assert = (function(v: any, message: string): ...)    |    (function(v: any): ...)
type tostring = (function(v: any): string)
type tonumber = (function(e: any, base: number): number|nil)    |    (function(e: any): number|nil)
type io = {
	tmpfile = (function(): file),
	read = (function(...): ...),
	output = (function(file: string|file): file|nil)    |    (function(): file|nil),
	open = (function(filename: string, mode: string): file|nil, string|nil)    |    (function(filename: string): file|nil, string|nil),
	close = (function(file: file): boolean|nil, string, number|nil)    |    (function(): boolean|nil, string, number|nil),
	write = (function(...): file|nil, string|nil),
	popen = (function(prog: string, mode: string): file|nil, string|nil)    |    (function(prog: string): file|nil, string|nil),
	flush = (function(): nil),
	type = (function(obj: file): string|nil),
	lines = (function(filename: string, ...): empty_function)    |    (function(): empty_function),
	input = (function(file: string|file): file|nil)    |    (function(): file|nil)
}
type rawget = (function(table: table, index: any): any)
type xpcall = (function(f: empty_function, msgh: empty_function, arg1: any, ...): boolean, ...)    |    (function(f: empty_function, msgh: empty_function): boolean, ...)
type print = (function(...): nil)
type pcall = (function(f: empty_function, arg1: any, ...): boolean, ...)    |    (function(f: empty_function): boolean, ...)
type module = (function(name: string, ...): nil)    |    (function(name: string): nil)
type setfenv = (function(f: empty_function|number, table: table): empty_function|nil)
type love = {
	gamepadreleased = (function(joystick: Joystick, button: GamepadButton): nil),
	focus = (function(focus: boolean): nil),
	lowmemory = (function(): nil),
	getVersion = (function(): number, number, number, string),
	quit = (function(): boolean),
	wheelmoved = (function(x: number, y: number): nil),
	system = {
		setClipboardText = (function(text: string): nil),
		vibrate = (function(seconds: number): nil),
		openURL = (function(url: string): boolean),
		getPowerInfo = (function(): PowerState, number, number),
		getOS = (function(): string),
		getProcessorCount = (function(): number)
	},
	joystickhat = (function(joystick: Joystick, hat: number, direction: JoystickHat): nil),
	joystickaxis = (function(joystick: Joystick, axis: number, value: number): nil),
	joystickpressed = (function(joystick: number, button: number): nil),
	touchmoved = (function(id: light_userdata, x: number, y: number, dx: number, dy: number, pressure: number): nil),
	visible = (function(visible: boolean): nil),
	update = (function(dt: number): nil),
	errorhandler = (function(msg: string): nil),
	mousereleased = (function(x: number, y: number, button: number, isTouch: boolean, presses: number): nil),
	touchreleased = (function(id: light_userdata, x: number, y: number, dx: number, dy: number, pressure: number): nil),
	filedropped = (function(file: File): nil),
	mousepressed = (function(x: number, y: number, button: number, isTouch: boolean, presses: number): nil),
	touchpressed = (function(id: light_userdata, x: number, y: number, dx: number, dy: number, pressure: number): nil),
	event = {
		pump = (function(): nil),
		poll = (function(): empty_function),
		push = (function(e: Event, a: Variant, b: Variant, c: Variant, d: Variant): nil),
		wait = (function(): Event, Variant, Variant, Variant, Variant),
		quit = (function(exitstatus: number): nil)
	},
	window = {
		restore = (function(): nil),
		updateMode = (function(width: number, height: number, settings: table): boolean),
		fromPixels = (function(pixelvalue: number): number),
		toPixels = (function(value: number): number),
		requestAttention = (function(continuous: boolean): nil),
		setTitle = (function(title: string): nil),
		isVisible = (function(): boolean),
		isOpen = (function(): boolean),
		getDisplayName = (function(displayindex: number): string),
		getPixelScale = (function(): number),
		isMinimized = (function(): boolean),
		setMode = (function(width: number, height: number, flags: table): boolean),
		getMode = (function(): number, number, table),
		setIcon = (function(imagedata: ImageData): boolean),
		getTitle = (function(): string),
		setFullscreen = (function(fullscreen: boolean): boolean),
		setDisplaySleepEnabled = (function(enable: boolean): nil),
		minimize = (function(): nil),
		getFullscreenModes = (function(display: number): table),
		getDPIScale = (function(): number),
		getFullscreen = (function(): boolean, FullscreenType),
		getPosition = (function(): number, number, number),
		maximize = (function(): nil),
		isDisplaySleepEnabled = (function(): boolean),
		getIcon = (function(): ImageData),
		setPosition = (function(x: number, y: number, display: number): nil),
		showMessageBox = (function(title: string, message: string, type: MessageBoxType, attachtowindow: boolean): boolean),
		hasMouseFocus = (function(): boolean),
		isMaximized = (function(): boolean),
		hasFocus = (function(): boolean)
	},
	joystickadded = (function(joystick: Joystick): nil),
	touch = {
		getPressure = (function(id: light_userdata): number),
		getTouches = (function(): table)
	},
	timer = {
		step = (function(): number),
		getDelta = (function(): number),
		getTime = (function(): number),
		getFPS = (function(): number),
		sleep = (function(s: number): nil)
	},
	threaderror = (function(thread: Thread, errorstr: string): nil),
	textinput = (function(text: string): nil),
	textedited = (function(text: string, start: number, length: number): nil),
	conf = (function(t: table): nil),
	run = (function(): nil),
	draw = (function(): nil),
	setDeprecationOutput = (function(enable: boolean): nil),
	resize = (function(w: number, h: number): nil),
	Object = {
		typeOf = (function(name: string): boolean)
	},
	mousemoved = (function(x: number, y: number, dx: number, dy: number, istouch: boolean): nil),
	mousefocus = (function(focus: boolean): nil),
	gamepadpressed = (function(joystick: Joystick, button: GamepadButton): nil),
	hasDeprecationOutput = (function(): boolean),
	joystickreleased = (function(joystick: number, button: number): nil),
	joystickremoved = (function(joystick: Joystick): nil),
	gamepadaxis = (function(joystick: Joystick, axis: GamepadAxis, value: number): nil),
	keyreleased = (function(key: KeyConstant, scancode: Scancode): nil),
	directorydropped = (function(path: string): nil),
	load = (function(arg: table): nil),
	data = {
		encode = (function(containerType: ContainerType, format: EncodeFormat, sourceString: string, lineLength: number): Variant),
		decode = (function(containerType: ContainerType, format: EncodeFormat, sourceString: string): Variant),
		hash = (function(hashFunction: HashFunction, string: string): string),
		decompress = (function(container: ContainerType, compressedData: CompressedData): string)
	},
	keyboard = {
		hasTextInput = (function(): boolean),
		getScancodeFromKey = (function(key: KeyConstant): Scancode),
		isDown = (function(key: KeyConstant): boolean),
		setKeyRepeat = (function(enable: boolean): nil),
		setTextInput = (function(enable: boolean): nil),
		hasKeyRepeat = (function(): boolean),
		isScancodeDown = (function(scancode: Scancode, ...: Scancode[]): boolean)
	},
	keypressed = (function(key: KeyConstant, scancode: Scancode, isrepeat: boolean): nil)
}
type f = {
	close = (function(file: file): boolean|nil, string, number|nil),
	write = (function(file: file, ...): file|nil, string|nil),
	flush = (function(file: file): boolean|nil, string|nil),
	read = (function(file: file, ...): ...),
	lines = (function(file: file, ...): empty_function),
	setvbuf = (function(file: file, mode: string, size: number): boolean|nil, string|nil)    |    (function(file: file, mode: string): boolean|nil, string|nil),
	seek = (function(file: file, whence: string, offset: number): number|nil, string|nil)    |    (function(file: file, whence: string): number|nil, string|nil)    |    (function(file: file,): number|nil, string|nil)
}
type ffi = {
	cdef = (function(string): nil),
	abi = (function(string): boolean),
	metatype = (function(ct,table): cdata),
	new = (function(string/ctype,nelement,init...): cdata),
	copy = (function(dst,src,len / string): nil)    |    (function(dst,src,len /): nil)    |    (function(dst, /): nil),
	alignof = (function(ct): number),
	cast = (function(ctype,cdata): cdata),
	typeof = (function(ct): ctype),
	load = (function(string,global): userdata)    |    (function(string,): userdata),
	sizeof = (function(ct,nelem): number)    |    (function(ct,): number),
	string = (function(ptr, number): string)    |    (function(ptr,): string),
	gc = (function(ct,empty_function): cdata),
	istype = (function(ct,obj): boolean),
	fill = (function(dst, len, c): nil)    |    (function(dst, len,): nil),
	offsetof = (function(ct, field): number)
}
type debug = {
	sethook = (function(thread: thread, hook: empty_function, mask: string, count: number): nil)    |    (function(thread: thread, hook: empty_function, mask: string): nil)    |    (function( hook: empty_function, mask: string): nil),
	getregistry = (function(): nil),
	traceback = (function(thread: thread, message: any, level: number): string)    |    (function(thread: thread, message: any): string)    |    (function(thread: thread,): string)    |    (function(): string),
	setlocal = (function(thread: thread, level: number, local_: number, value: any): string|nil)    |    (function( level: number, local_: number, value: any): string|nil),
	getinfo = (function(thread: thread, f: empty_function|number, what: string): table|nil)    |    (function(thread: thread, f: empty_function|number): table|nil)    |    (function( f: empty_function|number): table|nil),
	upvalueid = (function(f: empty_function, n: number): userdata),
	setupvalue = (function(f: empty_function, up: number, value: any): string|nil),
	getlocal = (function(thread: thread, f: number|empty_function, local_: number): string|nil, any)    |    (function( f: number|empty_function, local_: number): string|nil, any),
	upvaluejoin = (function(f1: empty_function, n1: number, f2: empty_function, n2: number): nil),
	getupvalue = (function(f: empty_function, up: number): string|nil, any),
	getmetatable = (function(value: any): table|nil),
	setmetatable = (function(value: any, table: table|nil): any),
	gethook = (function(thread: thread): empty_function, string, number)    |    (function(): empty_function, string, number),
	getuservalue = (function(u: userdata): table|nil),
	debug = (function(): nil),
	getfenv = (function(o: any): table),
	setfenv = (function(object: any, table: table): any),
	setuservalue = (function(udata: userdata, value: table|nil): userdata)
}
type pairs = (function(t: table): empty_function, table, nil)
type rawequal = (function(v1: any, v2: any): boolean)
type loadstring = (function(string: string, chunkname: string): empty_function|nil, string|nil)    |    (function(string: string): empty_function|nil, string|nil)
type package = {
	searchpath = (function(name: string, path: string, sep: string, rep: string): string|nil, string|nil)    |    (function(name: string, path: string, sep: string): string|nil, string|nil)    |    (function(name: string, path: string): string|nil, string|nil),
	seeall = (function(module: table): nil),
	loadlib = (function(libname: string, funcname: string): empty_function|nil)
}
type error = (function(message: string, level: number): nil)    |    (function(message: string): nil)
type bit32 = {
	lrotate = (function(x: number, disp: number): number),
	bor = (function(...): number),
	rshift = (function(x: number, disp: number): number),
	band = (function(...): number),
	lshift = (function(x: number, disp: number): number),
	rrotate = (function(x: number, disp: number): number),
	replace = (function(n: number, v: number, field: number, width: number): number)    |    (function(n: number, v: number, field: number): number),
	bxor = (function(...): number),
	arshift = (function(x: number, disp: number): number),
	extract = (function(n: number, field: number, width: number): number)    |    (function(n: number, field: number): number),
	bnot = (function(x: number): number),
	btest = (function(...): boolean)
}
type bit = bit32
type loadfile = (function(filename: string, mode: string, env: table): empty_function|nil, string|nil)    |    (function(filename: string, mode: string): empty_function|nil, string|nil)    |    (function(filename: string): empty_function|nil, string|nil)    |    (function(): empty_function|nil, string|nil)
type dofile = (function(filename: string): ...)    |    (function(): ...)
type table = {
	maxn = (function(table: table): number),
	move = (function(a1: table, f, e, t ,a2: table): nil)    |    (function(a1: table, f, e, t): nil),
	remove = (function(list: table, pos: number): any)    |    (function(list: table): any),
	sort = (function(list: table, comp: empty_function): nil)    |    (function(list: table): nil),
	unpack = (function(list: table, i: number, j: number): ...)    |    (function(list: table, i: number): ...)    |    (function(list: table): ...),
	insert = (function(list: table, pos: number, value: any): nil)    |    (function(list: table,  value: any): nil),
	concat = (function(list: table, sep: string, i: number, j: number): string)    |    (function(list: table, sep: string, i: number): string)    |    (function(list: table, sep: string): string)    |    (function(list: table): string),
	pack = (function(...): table)
}
type string = {
	find = (function(s: string, pattern: string, init: number, plain: boolean): number|nil, number, ...|nil|nil)    |    (function(s: string, pattern: string, init: number): number|nil, number, ...|nil|nil)    |    (function(s: string, pattern: string): number|nil, number, ...|nil|nil),
	len = (function(s: string): number),
	packsize = (function(fmt: string): number),
	match = (function(s: string, pattern: string, init: number): string|nil ,...|nil)    |    (function(s: string, pattern: string): string|nil ,...|nil),
	upper = (function(s: string): string),
	sub = (function(s: string, i: number, j: number): string)    |    (function(s: string, i: number): string),
	char = (function(...): string),
	rep = (function(s: string, n: number, sep: string): string)    |    (function(s: string, n: number): string),
	lower = (function(s: string): string),
	dump = (function(empty_function: empty_function): string),
	gmatch = (function(s: string, pattern: string): empty_function),
	reverse = (function(s: string): string),
	byte =             (function(s: string, i: number, j: number): ...) |
            (function(s: string, i: number): number | nil) |
			(function(s: string): number)
		,
	unpack = (function(fmt: string, s: string, pos: number): values)    |    (function(fmt: string, s: string): values),
	gsub = (function(s: string, pattern: string, repl: string|table|empty_function, n: number): string, number)    |    (function(s: string, pattern: string, repl: string|table|empty_function): string, number),
	format = (function(formatstring, ...): string),
	pack = (function(fmt: string, v1, v2, ...): string)
}
type ipairs = (function(t: table): empty_function, table, number)
type m = {
	__le = (function(op1, op2): boolean),
	__ipairs = (function(table): iterator, table, index),
	__lt = (function(op1, op2): boolean),
	__concat = (function(op1, op2): value),
	__sub = (function(op1, op2): value),
	__div = (function(op1, op2): value),
	__index = (function(table, key): value),
	__unm = (function(op): value),
	__gc = (function(func, ...): values),
	__mod = (function(op1, op2): value),
	__call = (function(func, ...): values),
	__newindex = (function(table, key, value): value),
	__pairs = (function(table): iterator, table, key),
	__tostring = (function(op): value),
	__eq = (function(op1, op2): boolean),
	__len = (function(op): value),
	__mul = (function(op1, op2): value),
	__add = (function(op1, op2): value),
	__pow = (function(op1, op2): value)
}
type type = (function(v: any): string)
type collectgarbage = (function(opt: string, arg: number): ...)    |    (function(opt: string): ...)    |    (function(): ...)
type getfenv = (function(f: empty_function|number): table)    |    (function(): table)
type next = (function(table: table, index: any): any, any|nil)    |    (function(table: table): any, any|nil)
type math = {
	ceil = (function(x: number): number),
	tan = (function(x: number): number),
	log10 = (function(x: number): number),
	sinh = (function(x: number): number),
	ldexp = (function(m: number, e: number): number),
	tointeger = (function(x: number): number),
	cosh = (function(x: number): number),
	min = (function(x: number, ...): number),
	fmod = (function(x: number, y: number): number),
	exp = (function(x: number): number),
	random = (function(m: number, n: number): number)    |    (function(m: number): number)    |    (function(): number),
	rad = (function(x: number): number),
	log = (function(x: number, base: number): number)    |    (function(x: number): number),
	cos = (function(x: number): number),
	randomseed = (function(x: number): nil),
	floor = (function(x: number): number),
	tanh = (function(x: number): number),
	max = (function(x: number, ...): number),
	pow = (function(x: number, y: number): number),
	ult = (function(m: number, n: number): boolean),
	acos = (function(x: number): number),
	type = (function(x: number): string),
	abs = (function(x: number): number),
	frexp = (function(x: number): number, number),
	deg = (function(x: number): number),
	modf = (function(x: number): number, number),
	atan2 = (function(y: number, x: number): number),
	asin = (function(x: number): number),
	atan = (function(x: number): number),
	sqrt = (function(x: number): number),
	sin = (function(x: number): number)
}
type load = (function(ld: string|empty_function, source: string, mode: string, env: table): empty_function|nil, string|nil)    |    (function(ld: string|empty_function, source: string, mode: string): empty_function|nil, string|nil)    |    (function(ld: string|empty_function, source: string): empty_function|nil, string|nil)    |    (function(ld: string|empty_function): empty_function|nil, string|nil)
type os = {
	execute = (function(command: string): boolean|nil, string, number|nil)    |    (function(): boolean|nil, string, number|nil),
	rename = (function(oldname: string, newname: string): boolean|nil, string, number|nil),
	getenv = (function(varname: string): string|nil),
	difftime = (function(t2: number, t1: number): number),
	exit = (function(code: boolean|number, close: boolean): nil)    |    (function(code: boolean|number): nil)    |    (function(): nil),
	remove = (function(filename: string): boolean|nil, string, number|nil),
	setlocale = (function(local_e: string, category: string): string|nil)    |    (function(local_e: string): string|nil),
	date = (function(format: string, time: number): string|table)    |    (function(format: string): string|table)    |    (function(): string|table),
	time = (function(table: table): number)    |    (function(): number),
	clock = (function(): number),
	tmpname = (function(): string)
}
type setmetatable = (function(table: table, metatable: table|nil): table)
type select = (function(index: number|string, ...): ...)
type rawlen = (function(v: table|string): number)
type unpack = (function(list: table, i: number, j: number): ...)    |    (function(list: table, i: number): ...)    |    (function(list: table): ...)
type require = (function(modname: string): any)
type rawset = (function(table: table, index: any, value: any): table)
type getmetatable = (function(object: any): table|nil)

-- overrides

-- ^string is just to circumvent getting the primitive type string

type ^string.match = function(s, pattern, init)
	if s.data and pattern.data then
		local res = {s.data:match(pattern.data)}
		for i,v in ipairs(res) do
			res[i] = types.Create("string", v)
		end
		return unpack(res)
	end

	if pattern.data then
		local out = {}
		for s in pattern.data:gmatch("%b()") do
			table.insert(out, types.Create("string") + types.Create("nil"))
		end
		return unpack(out)
	end
end

type ^string.len = function(str)
	if str.data then
		return types.Create("number", #str.data, true)
	end

	return types.Create("number")
end

type ^string.gsub = function(str, pattern, val)
	if val:IsType("function") then
		local args = {}

		if pattern.data then
			for group in pattern.data:gmatch("%b()") do
				table.insert(args, types.Create("string"))
			end
		end

		if not args[1] then
			args[1] = types.Create("string")
		end

		for i,v in ipairs(args) do
			val.data.arg.data[i] = v
		end

		val.data.ret.data[1] = types.Create("string")

	end

	return types.Create("string")
end

type assert = function(obj, err)
	if obj:IsTruthy() or obj.data == true then
		return obj
	end
	error(err and err.data or "assertion failed")
end

type type_assert = function(what: any, type: any, value: any, ...)
	if not what:SupersetOf(type) or (what.type == "any" and type.type ~= "any") then
		error("expected type " .. tostring(type) .." got " .. tostring(what))
	end
end

type next = function(t, k)
	if not t.data then
		return
	end

	local k = types.Set:new()
	local v = types.Set:new()

	for _, kv in ipairs(t.data) do
		k:AddElement(kv.key)
		v:AddElement(kv.val)
	end

	return k,v
end

type pairs = function(tbl)
	local next = analyzer:GetValue("next", "typesystem")
	return next, tbl, nil
end

type ipairs = function(tbl)
	local next = analyzer:GetValue("next", "typesystem")
	return next, tbl, nil
end


type require = function(name)
	local str = name.data

	if oh.GetBaseAnalyzer():GetValue("_G", "typesystem"):Get(str) then
		return oh.GetBaseAnalyzer():GetValue("_G", "typesystem"):Get(str)
	end

	if self:GetValue(str, "typesystem") then
		return self:GetValue(str, "typesystem")
	end

	for _, searcher in ipairs(package.loaders) do
		local loader = searcher(str)
		if type(loader) == "function" then
			local path = debug.getinfo(loader).source
			if path:sub(1, 1) == "@" then
				local path = path:sub(2)

				local ast = assert(require("oh").FileToAST(path))
				analyzer:AnalyzeStatement(ast)

				return unpack(analyzer.last_return)
			end
		end
	end

	error("unable to find module " .. str)
end

type table.insert = function(tbl, ...)
	local pos, val = ...

	if not val then
		val = ...
		pos = #tbl.data + 1
	else
		pos = pos.data
	end

	if tbl:Type ~= "tuple" then
		local values = {}

		for i, keyval in ipairs(tbl.data) do
			values[i] = keyval.val
		end

		local list = types.Create("list", {values = values})

		for k,v in pairs(tbl) do
			tbl[k] = nil
		end

		for k,v in pairs(list) do
			tbl[k] = v
		end

		setmetatable(tbl, types.Tuple)
	end
	table.insert(tbl.data, pos, val)

	tbl.max = tbl.max or types.Create("number", pos, true)
	tbl.max.data = pos

end

type TPRINT = function(...) print(...) end


type table.sort = function(tbl, func)
	local next = oh.GetBaseAnalyzer():GetValue("_G", "typesystem"):Get("next").func
	local k,v = next(tbl)
	func.arguments[1] = v
	func.arguments[2] = v
end

type setmetatable = function(tbl, meta)
	if meta.data then
		tbl.meta = meta
	end

	return tbl
end

